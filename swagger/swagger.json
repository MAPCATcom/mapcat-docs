{
  "swagger": "2.0",
  "info": {
    "title": "MAPCAT API",
    "description": "API description for MAPCAT",
    "version": "1.0.0"
  },
  "host": "api-dev.mapcat.com",
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "APIKeyHeader": {
      "type": "apiKey",
      "in": "header",
      "name": "x-api-key"
    }
  },
  "security": [
    {
      "APIKeyHeader": []
    }
  ],
  "paths": {
    "/poi/layers": {
      "get": {
        "summary": "The Poi layer search by poi osmid API point returns the layer configs, that contain the given poi.",
        "description": "Returns layer configs as json object",
        "parameters": [
          {
            "name": "lng",
            "in": "query",
            "description": "poi longitude",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "lat",
            "in": "query",
            "description": "poi latitude",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "osmidx",
            "in": "query",
            "description": "poi osmid",
            "required": true,
            "type": "number",
            "format": "long"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "two-letter language code (ISO 639-1)",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "VIS API"
        ],
        "responses": {
          "200": {
            "description": "Array of layer config objects.",
            "schema": {
              "$ref": "#/definitions/LayerConfigResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ResponseMeta"
            }
          }
        }
      }
    },
    "/poi/search_layer": {
      "get": {
        "summary": "The Poi layer search API point returns the layer configs, that statisfy the query string.",
        "description": "Returns layer configs as json object",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "query string",
            "required": true,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "two-letter language code (ISO 639-1)",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "VIS API"
        ],
        "responses": {
          "200": {
            "description": "Array of layer config objects.",
            "schema": {
              "$ref": "#/definitions/LayerConfigResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ResponseMeta"
            }
          }
        }
      }
    },
    "/poi/search_layer_by_category": {
      "get": {
        "summary": "The Poi layer search API point returns the layer configs, that statisfy the maincat, subcat strings.",
        "description": "Returns layer configs as json object",
        "parameters": [
          {
            "name": "maincat",
            "in": "query",
            "description": "maincat name",
            "required": true,
            "type": "string"
          },
          {
            "name": "subcat",
            "in": "query",
            "description": "subcat name",
            "required": false,
            "type": "string"
          },
          {
            "name": "lang",
            "in": "query",
            "description": "two-letter language code (ISO 639-1)",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "VIS API"
        ],
        "responses": {
          "200": {
            "description": "Array of layer config objects.",
            "schema": {
              "$ref": "#/definitions/LayerConfigResponse"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/ResponseMeta"
            }
          }
        }
      }
    },
    "/relief/elevation_weights": {
      "post": {
        "summary": "Calculate elevation",
        "description": "Calculate elevation values for the segments in the post data. Both the request and the response is in a straightforward, binarily serialized format, with separator safeguards.\n",
        "consumes": [
          "application/octet-stream"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "segments",
            "in": "body",
            "description": "geometry of segments",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ElevationInput"
            }
          }
        ],
        "tags": [
          "VIS API"
        ],
        "responses": {
          "200": {
            "description": "If everything goes well forward / backward elevation weights are returned for each segment.",
            "schema": {
              "$ref": "#/definitions/ElevationOutput"
            }
          },
          "default": {
            "description": "In every other case an empty response is returned.",
            "schema": {
              "$ref": "#/definitions/ElevationOutput"
            }
          }
        }
      }
    },
    "/relief/heights": {
      "post": {
        "summary": "Heights along path.",
        "description": "Returns the heights in meters for a sequence of input geo coordinates.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "locations",
            "in": "body",
            "description": "input geo coordinate sequence",
            "required": true,
            "schema": {
              "$ref": "#/definitions/HeightQuery"
            }
          }
        ],
        "tags": [
          "VIS API"
        ],
        "responses": {
          "200": {
            "description": "Array of altitudes corresponding to the input geo coordinates.",
            "schema": {
              "$ref": "#/definitions/HeightResponse"
            }
          },
          "400": {
            "description": "In case of bad parameters: response member *meta* has 400 as *status_code*.\n",
            "schema": {
              "$ref": "#/definitions/HeightResponse"
            }
          }
        }
      }
    },
    "/location/invgeocode": {
      "get": {
        "summary": "Inverse geocoding",
        "description": "Returns what map elements are at a given location and their properties.\n",
        "parameters": [
          {
            "name": "lat",
            "in": "query",
            "description": "Latitude component of location.",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "lng",
            "in": "query",
            "description": "Longitude component of location.",
            "required": true,
            "type": "number",
            "format": "double"
          },
          {
            "name": "lang",
            "in": "query",
            "type": "string",
            "description": "Two-letter language code (ISO 639-1). If not present, returns value in the default language of the found map elements."
          },
          {
            "name": "osmidx",
            "in": "query",
            "type": "number",
            "format": "long",
            "description": "OSM identifier of the clicked poi. If present, will return additional attributes for the clicked poi."
          }
        ],
        "tags": [
          "SIGIS API"
        ],
        "responses": {
          "default": {
            "description": "Metadata and response values.",
            "schema": {
              "$ref": "#/definitions/InvgeoResponse"
            }
          }
        }
      }
    },
    "/location/search": {
      "get": {
        "summary": "Search",
        "description": "Performs a text and georelevance search.\n",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Search term",
            "required": true,
            "type": "string"
          },
          {
            "name": "lat",
            "in": "query",
            "description": "Latitude component of viewport center.",
            "type": "number",
            "format": "double"
          },
          {
            "name": "lng",
            "in": "query",
            "description": "Longitude component of viewport center.",
            "type": "number",
            "format": "double"
          },
          {
            "name": "lang",
            "in": "query",
            "type": "string",
            "description": "Two-letter language code (ISO 639-1). If not present, returns value in the default language of the found map elements."
          },
          {
            "name": "bbox",
            "in": "query",
            "type": "string",
            "description": "Bounding box of the viewport. Four decimal numbers, seaparated by commas in the topleft-long,topleft-lat,bottomright-lon,bottomright-lat order."
          }
        ],
        "tags": [
          "SIGIS API"
        ],
        "responses": {
          "default": {
            "description": "Metadata and response values.",
            "schema": {
              "$ref": "#/definitions/SearchResponse"
            }
          }
        }
      }
    },
    "/routing/route": {
      "post": {
        "summary": "General routing API point",
        "description": "The routing API returns one or several routing results to the routing request, which is defined by two or more waypoints and an optional vehicle type and an optional setting value.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "json",
            "in": "body",
            "description": "JSON formatted parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestRouting"
            }
          }
        ],
        "tags": [
          "RIS API"
        ],
        "responses": {
          "200": {
            "description": "The request was processed successfully, the response contains all the relevant data, but results might be missing, if routing was unsuccessful.",
            "schema": {
              "$ref": "#/definitions/ResponseRouting"
            }
          },
          "default": {
            "description": "If the request could not be processed, response member *meta* has a *status_code* and *message* to help identify the error, results are missing.",
            "schema": {
              "$ref": "#/definitions/ResponseRouting"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "HeightQueryItem": {
      "type": "array",
      "description": "longitude, latitude",
      "minItems": 2,
      "maxItems": 2,
      "items": {
        "type": "number",
        "format": "double or integer",
      },
      "example" : [2.1, 3.1]
    },
    "HeightQuery": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/HeightQueryItem"
      }
    },
    "ResponseMeta": {
      "type": "object",
      "properties": {
        "version": {
          "type": "integer"
        },
        "status_code": {
          "type": "integer",
          "description": "http status code"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "HeightResponse": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/ResponseMeta"
        },
        "result": {
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        }
      }
    },
    "LayerConfigItem": {
      "type": "object",
      "required": [
        "color",
        "icon",
        "main",
        "name"
      ],
      "properties": {
        "color": {
          "type": "string",
          "description": "color hexa code"
        },
        "icon": {
          "type": "string",
          "description": "icon name"
        },
        "main": {
          "type": "string",
          "description": "main category name"
        },
        "sub": {
          "type": "string",
          "description": "sub category name"
        },
        "name": {
          "type": "string",
          "description": "main category localized name"
        },
        "subname": {
          "type": "string",
          "description": "sub category localized name"
        }
      }
    },
    "LayerConfigResponse": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/ResponseMeta"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LayerConfigItem"
          }
        }
      }
    },
    "ElevationInput": {
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "description": "number of segments contained in the input",
          "maximum": 100000,
	  "example" : 1
        },
        "segments": {
          "type": "array",
          "description": "a vector of segments",
          "items": {
            "type": "array",
            "description": "a vector of geometry points",
            "items": {
              "type": "array",
              "items": {
                "type": "number",
                "format": "double"
              },
              "maxItems": 100000
            }
          },
	  "example" : [[[[19.049656, 47.467163],[19.049446, 47.466502],[19.049402, 47.466367],[19.04948, 47.466349]]]]
        }
      }
    },
    "ElevationOutput": {
      "type": "object",
      "properties": {
        "size": {
          "type": "integer",
          "description": "number of elevation weight pairs contained in the output"
        },
        "weights": {
          "type": "array",
          "description": "a vector of elevation weight pairs",
          "items": {
            "type": "object",
            "description": "elevation weight pair",
            "properties": {
              "forward": {
                "type": "number",
                "description": "forward elevation weight",
                "format": "double"
              },
              "backward": {
                "type": "number",
                "description": "backward elevation weight",
                "format": "double"
              }
            }
          }
        }
      }
    },
    "InvgeoResponse": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/Meta"
        },
        "result": {
          "$ref": "#/definitions/InvgeocodeResult"
        }
      }
    },
    "SearchResponse": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/Meta"
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SearchResult"
          }
        }
      }
    },
    "SearchResult": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "Can be STR, POI, SHP, COS or ADR"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "poi": {
          "$ref": "#/definitions/POI",
          "description": "Only present if the result type is POI"
        },
        "geometry": {
          "$ref": "#/definitions/Geometries"
        }
      }
    },
    "InvgeocodeResult": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/Address"
        },
        "poi": {
          "$ref": "#/definitions/POI"
        },
        "pois": {
          "type": "array",
          "description": "Array of nearby POIs",
          "items": {
            "$ref": "#/definitions/POI"
          }
        },
        "shapes": {
          "type": "array",
          "description": "list of the names of the non-admin shapes under the clicked point",
          "items": {
            "type": "string"
          }
        },
        "position": {
          "type": "object",
          "description": "GeoJSON point coordinate of the request"
        },
        "poiattr": {
          "type": "object",
          "description": "Only present if osmidx parameter is present. Contains every available attribute of the clicked POI from maincat, subcat, name, stname, hnum, postcode, telnum, email, url"
        }
      }
    },
    "Address": {
      "type": "object",
      "description": "Descriptor for a specific map object's address elements.",
      "properties": {
        "address": {
          "type": "string",
          "description": "Full display address of the map object"
        },
        "country": {
          "type": "string"
        },
        "countrycode": {
          "type": "string",
          "description": "Three-letter country code (ISO 3166-1)"
        },
        "state": {
          "type": "string"
        },
        "county": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "district": {
          "type": "string"
        },
        "suburb": {
          "type": "string"
        },
        "street": {
          "type": "string"
        },
        "route": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        },
        "hnum": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "description": "Display name for the object itself - poi or shape name, usually."
        }
      }
    },
    "POI": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Tha name of the POI"
        },
        "osmidx": {
          "type": "number",
          "format": "long",
          "description": "OSM identifier of the poi object"
        },
        "maincat": {
          "type": "string",
          "description": "Main POI category"
        },
        "subcat": {
          "type": "string",
          "description": "POI subcategory"
        },
        "pos": {
          "type": "object",
          "description": "GeoJSON point - location of the POI"
        }
      }
    },
    "Geometries": {
      "type": "object",
      "properties": {
        "geometry": {
          "type": "object",
          "description": "Full geometry of street objects in GEOJson format"
        },
        "position": {
          "type": "object",
          "description": "Position of the objects in GEOJson format"
        },
        "tl": {
          "type": "object",
          "description": "Top left of the object's bounding box in GEOJson format"
        },
        "br": {
          "type": "object",
          "description": "Bottom right of the object's bounding box in GEOJson format"
        }
      }
    },
    "Meta": {
      "type": "object",
      "properties": {
        "status_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "WayPoint": {
      "description": "a waypoint object",
      "type": "object",
      "properties": {
        "lat": {
          "type": "number",
          "format": "double",
          "description": "latitude of waypoint"
        },
        "lon": {
          "type": "number",
          "format": "double",
          "description": "longitude of waypoint"
        }
      }
    },
    "CoordGeoJSON": {
      "type": "array",
      "description": "longitude, latitude in that order",
      "items": {
        "type": "number",
        "format": "double"
      },
      "minItems": 2,
      "maxItems": 2
    },
    "RequestRouting": {
      "type": "object",
      "description": "a JSON object containing the parameters used in routing",
      "properties": {
        "waypoints": {
          "type": "array",
          "description": "an array of GeoJSON coordinates which will be used as waypoints in routing",
          "items": {
            "$ref": "#/definitions/WayPoint"
          },
          "minItems": 2,
          "maxItems": 5
        },
        "vtp": {
          "type": "integer",
          "description": "(optional) Vehicle type used in routing [ 0: car, 1: truck, 2: bus, 3: taxi, 5: bicycle, 6: foot, 7: emergency ], when not defined 1 is used\n",
          "default": 1
        },
        "set": {
          "type": "integer",
          "description": "(optional) Vehicle settings used in car routing, selects the profile that has the appropriate setting (motorway / ferry usage), if available, when not defined 2 is used.\n",
          "default": 2
        }
      }
    },
    "ResultRouting": {
      "type": "object",
      "description": "a GeoJSON FeatureCollection containing one routing result",
      "properties": {
        "features": {
          "type": "array",
          "description": "array of routing results",
          "items": {
            "type": "object",
            "properties": {
              "geometry": {
                "type": "object",
                "description": "geometry of the routing result as a GeoJSON LineString",
                "properties": {
                  "coordinates": {
                    "type": "array",
                    "description": "array of GeoJSON coordinates",
                    "items": {
                      "$ref": "#/definitions/CoordGeoJSON"
                    }
                  },
                  "type": {
                    "type": "string",
                    "default": "LineString"
                  }
                }
              },
              "properties": {
                "type": "object",
                "description": "properties of the routing result",
                "properties": {
                  "bicycle-types": {
                    "type": "array",
                    "description": "a grouping of different bicycle meta types, only returned when the vehicle type is set to bicycle",
                    "items": {
                      "type": "array",
                      "description": "a group of meta type - start geometry index, end geometry index, meta type",
                      "items": {
                        "type": "integer"
                      },
                      "minItems": 3,
                      "maxItems": 3
                    }
                  },
                  "join-point": {
                    "type": "array",
                    "description": "an array of indeces, where the subresults between pairs of waypoints are joined",
                    "items": {
                      "type": "integer"
                    }
                  },
                  "maneuvers": {
                    "type": "array",
                    "description": "an array of maneuvers, making up the whole route uninterrupted",
                    "items": {
                      "type": "object",
                      "description": "a maneuver",
                      "properties": {
                        "index": {
                          "type": "integer",
                          "description": "a geometry index marking the start of the maneuver"
                        },
                        "name": {
                          "type": "string",
                          "description": "name of the next road traveresed"
                        },
                        "mode": {
                          "type": "string",
                          "description": "mode of travel used on the next part of the route"
                        },
                        "type": {
                          "type": "string",
                          "description": "type of the maneuver, see OSRM 5.x specification"
                        },
                        "modifier": {
                          "type": "string",
                          "description": "direction change of the maneuver, see OSRM 5.x specification"
                        },
                        "exit": {
                          "type": "integer",
                          "description": "number of the roundabout / intersection exit to take"
                        }
                      }
                    }
                  },
                  "profile": {
                    "type": "string",
                    "description": "unique identifier(s) of the profile(s) used in generating this result"
                  },
                  "summary": {
                    "type": "string",
                    "description": "summary of most significant roads traversed in this result"
                  },
                  "length": {
                    "type": "number",
                    "description": "length of the routing result, measured along the network only",
                    "format": "double"
                  },
                  "time": {
                    "type": "number",
                    "description": "recalculated time of the routing result, using the meta speeds, if available",
                    "format": "double"
                  },
                  "weight": {
                    "type": "number",
                    "description": "original weight of the routing result",
                    "format": "double"
                  }
                }
              },
              "type": {
                "type": "string",
                "default": "Feature"
              }
            }
          }
        },
        "properties": {
          "type": "object",
          "description": "general properties of routing results, like real start and goal coordinates",
          "properties": {
            "start": {
              "$ref": "#/definitions/CoordGeoJSON"
            },
            "goal": {
              "$ref": "#/definitions/CoordGeoJSON"
            }
          }
        },
        "type": {
          "type": "string",
          "default": "FeatureCollection"
        }
      }
    },
    "ResponseRouting": {
      "type": "object",
      "properties": {
        "meta": {
          "$ref": "#/definitions/ResponseMeta"
        },
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultRouting"
          }
        }
      }
    }
  }
}

